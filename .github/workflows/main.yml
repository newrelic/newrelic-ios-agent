name: CI
on:  
  push:
    branches: 
      - staging
      - main
      - develop
  pull_request:

jobs:
  testIOS:
    name : TestIOS 
    # runs-on: will be set to macos-latest when running on actual GHA. 
    # *** runs-on: ubuntu-latest is used when running via act on mac os. ***
    runs-on: macos-latest 
    outputs:
      coverageXMLPath: ${{ steps.setCoverageXMLPath.outputs.coverageXMLPath }}
    steps:
    - uses: actions/checkout@master
      with: 
        submodules: true
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.1'

    - name: Install gems
      run: bundle install

    - id: setCoverageXMLPath
      name: Run tests on iOS (using fastlane)
      run: | 
        bundle exec fastlane runIOSTests
        echo coverageXMLPath=${BUILD_DIR}/lcov/coverage.xml >> $GITHUB_OUTPUT

    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ${{ steps.setCoverageXMLPath.outputs.coverageXMLPath }}

  testTVOS:
    name : TestTVOS
    # runs-on: will be set to macos-latest when running on actual GHA. 
    # *** runs-on: ubuntu-latest is used when running via act on mac os. ***
    runs-on: macos-latest 
    steps:
    - uses: actions/checkout@v3
      with: 
        submodules: true
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.1'

    - name: Install gems
      run: bundle install

    - name: Run tests on tvOS (using fastlane)
      run: bundle exec fastlane runTVOSTests
  deployS3:
    name: DeployS3
    # runs-on: will be set to macos-latest when running on actual GHA. 
    # *** runs-on: ubuntu-latest is used when running via act on mac os. ***
    runs-on: macos-latest 
    needs: [testIOS, testTVOS]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.setOutput.outputs.version }}
    steps:
    - uses: actions/checkout@v3
      with: 
        submodules: true
    
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '14.1'

    - name: Install gems
      run: bundle install

    - name: Build NewRelic.xcframework (using fastlane)
      run: bundle exec fastlane buildAndZip

    - name: Get name
      run: echo "version=$(cat fastlane/build_version)" >> $GITHUB_ENV

    - id: setOutput
      name: Print name
      run: echo "version=${{ env.version }}"  >> $GITHUB_OUTPUT

    - name: Deploy to staging S3
      run: "aws s3 cp NewRelic_XCFramework_Agent_${{ env.version }}.zip s3://nr-downloads-main/ios-v5/"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  # Create NewRelicAgent.podspec & Package.swift with new version number and checksum.
  deployStagingSpecs:
    name: DeployStagingSpecs
    runs-on: macos-latest 
    needs: [deployS3]
    if: github.ref == 'refs/heads/staging'
    steps:
    - uses: actions/checkout@v3
      with: 
        submodules: true

    - name: Install gems
      run: bundle install

    - name: Get name
      run: echo "version=${{needs.deployS3.outputs.version}}" >> $GITHUB_ENV

    - name: Print XCFramework name
      run: echo "${{ env.version }}" 

    - name: Create Podspec for XCFramework version
      run: |
        cp cocoapods/NewRelicAgent.podspec.template NewRelicAgent.podspec
        REPLACE=X.XX
        sed -i bak "s/$REPLACE/${{ env.version }}/g" NewRelicAgent.podspec
        sed -i -e 's/ios_agent/ios-v5/g' NewRelicAgent.podspec
        rm NewRelicAgent.podspec-e
        rm NewRelicAgent.podspecbak

    - name: Create Package.swift for XCFramework version
      run: |
        cp NewRelic-SwiftPackage/Package.swift.template Package.swift
        ## Below README required for prod spm repo.
        # cp cocoapods/README.md README.md
        REPLACEVER={{VERSION}}
        REPLACECHECKSUM={{CHECKSUM}}

        XCFRAMEWORK_NAME="NewRelic_XCFramework_Agent_${{ env.version }}.zip"
        curl https://download.newrelic.com/ios-v5/$XCFRAMEWORK_NAME -o $XCFRAMEWORK_NAME
        SPM_CHECKSUM=`swift package compute-checksum  ${XCFRAMEWORK_NAME}`

        sed -i bak "s/$REPLACEVER/${{ env.version }}/g" Package.swift
        sed -i -e "s/$REPLACECHECKSUM/$SPM_CHECKSUM/g" Package.swift
        sed -i -e 's/ios_agent/ios-v5/g' Package.swift
        rm Package.swift-e
        rm Package.swiftbak

        rm $XCFRAMEWORK_NAME

    # Use git-auto-commit-action to push NewRelicAgent.podspec & Package.swift up to root of newrelic-ios-agent branch: staging.
    # This should also tag the staging release branch w/ version number tag.
    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "[${{ env.version }}] Staging Release"
        branch: staging
        tagging_message: "${{ env.version }}"

