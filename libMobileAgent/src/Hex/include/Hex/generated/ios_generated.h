// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IOS_COM_NEWRELIC_MOBILE_FBS_IOS_H_
#define FLATBUFFERS_GENERATED_IOS_COM_NEWRELIC_MOBILE_FBS_IOS_H_

#include <flatbuffers/flatbuffers.h>

namespace com {
namespace newrelic {
namespace mobile {
namespace fbs {
namespace ios {

struct Library;
struct LibraryT;

enum Arch {
  Arch_armv7 = 0,
  Arch_arm64 = 1,
  Arch_MIN = Arch_armv7,
  Arch_MAX = Arch_arm64
};

inline Arch (&EnumValuesArch())[2] {
  static Arch values[] = {
    Arch_armv7,
    Arch_arm64
  };
  return values;
}

inline const char **EnumNamesArch() {
  static const char *names[] = {
    "armv7",
    "arm64",
    nullptr
  };
  return names;
}

inline const char *EnumNameArch(Arch e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesArch()[index];
}

struct LibraryT : public flatbuffers::NativeTable {
  typedef Library TableType;
  uint64_t uuidLow;
  uint64_t uuidHigh;
  uint64_t address;
  bool userLibrary;
  Arch arch;
  uint64_t size;
  std::string path;
  LibraryT()
      : uuidLow(0),
        uuidHigh(0),
        address(0),
        userLibrary(false),
        arch(Arch_armv7),
        size(0) {
  }
};

struct Library FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LibraryT NativeTableType;
  enum {
    VT_UUIDLOW = 4,
    VT_UUIDHIGH = 6,
    VT_ADDRESS = 8,
    VT_USERLIBRARY = 10,
    VT_ARCH = 12,
    VT_SIZE = 14,
    VT_PATH = 16
  };
  uint64_t uuidLow() const {
    return GetField<uint64_t>(VT_UUIDLOW, 0);
  }
  bool mutate_uuidLow(uint64_t _uuidLow) {
    return SetField<uint64_t>(VT_UUIDLOW, _uuidLow, 0);
  }
  uint64_t uuidHigh() const {
    return GetField<uint64_t>(VT_UUIDHIGH, 0);
  }
  bool mutate_uuidHigh(uint64_t _uuidHigh) {
    return SetField<uint64_t>(VT_UUIDHIGH, _uuidHigh, 0);
  }
  uint64_t address() const {
    return GetField<uint64_t>(VT_ADDRESS, 0);
  }
  bool mutate_address(uint64_t _address) {
    return SetField<uint64_t>(VT_ADDRESS, _address, 0);
  }
  bool userLibrary() const {
    return GetField<uint8_t>(VT_USERLIBRARY, 0) != 0;
  }
  bool mutate_userLibrary(bool _userLibrary) {
    return SetField<uint8_t>(VT_USERLIBRARY, static_cast<uint8_t>(_userLibrary), 0);
  }
  Arch arch() const {
    return static_cast<Arch>(GetField<uint8_t>(VT_ARCH, 0));
  }
  bool mutate_arch(Arch _arch) {
    return SetField<uint8_t>(VT_ARCH, static_cast<uint8_t>(_arch), 0);
  }
  uint64_t size() const {
    return GetField<uint64_t>(VT_SIZE, 0);
  }
  bool mutate_size(uint64_t _size) {
    return SetField<uint64_t>(VT_SIZE, _size, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  flatbuffers::String *mutable_path() {
    return GetPointer<flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_UUIDLOW) &&
           VerifyField<uint64_t>(verifier, VT_UUIDHIGH) &&
           VerifyField<uint64_t>(verifier, VT_ADDRESS) &&
           VerifyField<uint8_t>(verifier, VT_USERLIBRARY) &&
           VerifyField<uint8_t>(verifier, VT_ARCH) &&
           VerifyField<uint64_t>(verifier, VT_SIZE) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.Verify(path()) &&
           verifier.EndTable();
  }
  LibraryT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(LibraryT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Library> Pack(flatbuffers::FlatBufferBuilder &_fbb, const LibraryT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct LibraryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuidLow(uint64_t uuidLow) {
    fbb_.AddElement<uint64_t>(Library::VT_UUIDLOW, uuidLow, 0);
  }
  void add_uuidHigh(uint64_t uuidHigh) {
    fbb_.AddElement<uint64_t>(Library::VT_UUIDHIGH, uuidHigh, 0);
  }
  void add_address(uint64_t address) {
    fbb_.AddElement<uint64_t>(Library::VT_ADDRESS, address, 0);
  }
  void add_userLibrary(bool userLibrary) {
    fbb_.AddElement<uint8_t>(Library::VT_USERLIBRARY, static_cast<uint8_t>(userLibrary), 0);
  }
  void add_arch(Arch arch) {
    fbb_.AddElement<uint8_t>(Library::VT_ARCH, static_cast<uint8_t>(arch), 0);
  }
  void add_size(uint64_t size) {
    fbb_.AddElement<uint64_t>(Library::VT_SIZE, size, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Library::VT_PATH, path);
  }
  LibraryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LibraryBuilder &operator=(const LibraryBuilder &);
  flatbuffers::Offset<Library> Finish() {
    const auto end = fbb_.EndTable(start_, 7);
    auto o = flatbuffers::Offset<Library>(end);
    return o;
  }
};

inline flatbuffers::Offset<Library> CreateLibrary(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uuidLow = 0,
    uint64_t uuidHigh = 0,
    uint64_t address = 0,
    bool userLibrary = false,
    Arch arch = Arch_armv7,
    uint64_t size = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  LibraryBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_address(address);
  builder_.add_uuidHigh(uuidHigh);
  builder_.add_uuidLow(uuidLow);
  builder_.add_path(path);
  builder_.add_arch(arch);
  builder_.add_userLibrary(userLibrary);
  return builder_.Finish();
}

inline flatbuffers::Offset<Library> CreateLibraryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t uuidLow = 0,
    uint64_t uuidHigh = 0,
    uint64_t address = 0,
    bool userLibrary = false,
    Arch arch = Arch_armv7,
    uint64_t size = 0,
    const char *path = nullptr) {
  return com::newrelic::mobile::fbs::ios::CreateLibrary(
      _fbb,
      uuidLow,
      uuidHigh,
      address,
      userLibrary,
      arch,
      size,
      path ? _fbb.CreateString(path) : 0);
}

flatbuffers::Offset<Library> CreateLibrary(flatbuffers::FlatBufferBuilder &_fbb, const LibraryT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline LibraryT *Library::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new LibraryT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Library::UnPackTo(LibraryT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = uuidLow(); _o->uuidLow = _e; };
  { auto _e = uuidHigh(); _o->uuidHigh = _e; };
  { auto _e = address(); _o->address = _e; };
  { auto _e = userLibrary(); _o->userLibrary = _e; };
  { auto _e = arch(); _o->arch = _e; };
  { auto _e = size(); _o->size = _e; };
  { auto _e = path(); if (_e) _o->path = _e->str(); };
}

inline flatbuffers::Offset<Library> Library::Pack(flatbuffers::FlatBufferBuilder &_fbb, const LibraryT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateLibrary(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Library> CreateLibrary(flatbuffers::FlatBufferBuilder &_fbb, const LibraryT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _uuidLow = _o->uuidLow;
  auto _uuidHigh = _o->uuidHigh;
  auto _address = _o->address;
  auto _userLibrary = _o->userLibrary;
  auto _arch = _o->arch;
  auto _size = _o->size;
  auto _path = _o->path.size() ? _fbb.CreateString(_o->path) : 0;
  return com::newrelic::mobile::fbs::ios::CreateLibrary(
      _fbb,
      _uuidLow,
      _uuidHigh,
      _address,
      _userLibrary,
      _arch,
      _size,
      _path);
}

inline const com::newrelic::mobile::fbs::ios::Library *GetLibrary(const void *buf) {
  return flatbuffers::GetRoot<com::newrelic::mobile::fbs::ios::Library>(buf);
}

inline Library *GetMutableLibrary(void *buf) {
  return flatbuffers::GetMutableRoot<Library>(buf);
}

inline bool VerifyLibraryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::newrelic::mobile::fbs::ios::Library>(nullptr);
}

inline void FinishLibraryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::newrelic::mobile::fbs::ios::Library> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<LibraryT> UnPackLibrary(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<LibraryT>(GetLibrary(buf)->UnPack(res));
}

}  // namespace ios
}  // namespace fbs
}  // namespace mobile
}  // namespace newrelic
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_IOS_COM_NEWRELIC_MOBILE_FBS_IOS_H_
