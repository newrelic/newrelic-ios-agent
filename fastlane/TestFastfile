platform :ios do

  desc "Run Agent tests for iOS and tvOS"
  lane :runTests do

    runIOSTests

    runTVOSTests

    runWatchOSTests
    
    deleteBuildArtifacts
  end

  # iOS Tests

  desc "Run Agent tests for iOS and generate code coverage"
  lane :runIOSTests do 

    deleteBuildArtifacts
    
    internalRunIOSTests

    coverage
  end
  
  lane :internalRunIOSTests do
    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: true,
      scheme: "Agent-iOS",
      device: "iPhone 8",
      disable_xcpretty: true
    )
  end
  
  desc "Run Agent tests for iOS"
  lane :runIOSTestsNoCov do 

    deleteBuildArtifacts
    
    internalRunIOSTests
  end

  desc "Run Agent tests for iOS beta"
  lane :runIOSBetaTests do |options|

    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "Agent-iOS",
      device: "iPhone 14 Pro Max (#{options[:os_version]})",
      output_style: 'raw'
    )
  end

  desc "Run App tests for iOS beta"
  lane :runIOSAppBetaTests do |options|

    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "NRTestApp",
      device: "iPhone 14 Pro Max (#{options[:os_version]})",
      output_style: 'raw'
    )
  end

  # tvOS Tests
  
  desc "Run Agent tests for tvOS"
  lane :runTVOSTests do 
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: true,
      scheme: "Agent-tvOS",
      device: "Apple TV",
      disable_xcpretty: true

    )
  end

  desc "Run Agent tests for tvOS beta"
  lane :runTVOSBetaTests do |options|
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "Agent-tvOS",
      device: "Apple TV 4K (3rd generation) (at 1080p) (#{options[:os_version]})",
      output_style: 'raw'
    )
  end

  desc "Run Agent tests for tvOS beta"
  lane :runTVOSAppBetaTests do |options|
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "NRTestApp (tvOS)",
      device: "Apple TV 4K (3rd generation) (at 1080p) (#{options[:os_version]})",
      output_style: 'raw'
    )
  end

  # watchOS Tests
  
  desc "Run Agent tests for watchOS"
  lane :runWatchOSTests do 
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: true,
      scheme: "Agent-watchOS",
      device: "Apple Watch SE (40mm) (2nd generation)",
      xcargs: "-testPlan Agent-watchOS"
    )
  end

  desc "Run Agent tests for watchOS beta"
  lane :runWatchOSBetaTests do |options|
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "Agent-watchOS",
      device: "Apple Watch SE (40mm) (2nd generation) (#{options[:os_version]})",
      xcargs: "-testPlan Agent-watchOS",
      output_style: 'raw'
    )
  end

  desc "Run Agent tests for watchOS beta"
  lane :runWatchOSAppBetaTests do |options|
    
    deleteBuildArtifacts

    run_tests(
      workspace: "Agent.xcworkspace",
      code_coverage: false,
      scheme: "NRTestApp (watchOS) Watch App",
      device: "Apple Watch SE (40mm) (2nd generation) (#{options[:os_version]})",
      xcargs: "-testPlan Agent-watchOS",
      output_style: 'raw'
    )
  end

  lane :coverage do 
    Dir.chdir("..") do
      begin
        sh("./XcodeCoverage/getcov -s -v -x")
        # move the XML file to the root of repo
        sh("source ./XcodeCoverage/env.sh && cp $BUILT_PRODUCTS_DIR/lcov/coverage.xml coverage.xml")
      rescue => ex
        # handle error
      ensure
        # do something that always run like clean up
      end
    end
  end

  # Note: Please copy your own .dSYM into the 'dylib-ios-agent' root for this test.
  desc "Run dSYM Upload Tools test"
  lane :runDsymUploadToolsTests do
    Dir.chdir("..") do
        # shouldn't fail with non-0 exit code, but will get a 401 due to invalid app token.
        sh("export DWARF_DSYM_FOLDER_PATH=\".\" && /usr/bin/xcrun --sdk macosx swift \"./dsym-upload-tools/run-symbol-tool.swift\" \"API-KEY\" --debug")

        # shouldn't fail
        sh("./dsym-upload-tools/run-symbol-tool \"API-KEY\"")        
    end
  end
end
