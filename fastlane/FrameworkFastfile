import "ConstantsFastfile"

platform :ios do

  desc "Ouput Universal NewRelic.xcframework"
  lane :internalOutputXCFramework do 
    # Now that we have the iOS.xcarchive, tvOS.xcarchive, and macOS.xcarchive 
    # and the iOS and tvOS Sim Frameworks built in archives and dd folder we can create the xcframework.
    Dir.chdir("..") do
      dirName = File.basename(Dir.getwd)

      wd = Dir.pwd
      iosArchive = "#{wd}/#{Constants::ARCHIVES}/iOS.xcarchive/Products/Library/Frameworks/NewRelic.framework"
      iosDsym = "#{wd}/#{Constants::ARCHIVES}/iOS.xcarchive/dSYMs/NewRelic.framework.dSYM"
      iosSimArchive = "#{wd}/#{Constants::DD}/Build/Products/#{Constants::MODE}-iphonesimulator/NewRelic.framework"

      tvOSArchive = "#{wd}/#{Constants::ARCHIVES}/tvOS.xcarchive/Products/Library/Frameworks/NewRelic.framework"
      tvOSDsym = "#{wd}/#{Constants::ARCHIVES}/tvOS.xcarchive/dSYMs/NewRelic.framework.dSYM"
      tvOSSimArchive = "#{wd}/#{Constants::DD}/Build/Products/#{Constants::MODE}-appletvsimulator/NewRelic.framework"

      watchOSArchive = "#{wd}/#{Constants::ARCHIVES}/watchOS.xcarchive/Products/Library/Frameworks/NewRelic.framework"
      watchOSDsym = "#{wd}/#{Constants::ARCHIVES}/watchOS.xcarchive/dSYMs/NewRelic.framework.dSYM"
      watchOSSimArchive = "#{wd}/#{Constants::DD}/Build/Products/#{Constants::MODE}-watchsimulator/NewRelic.framework"

      macOSArchive = "#{wd}/#{Constants::ARCHIVES}/macOS.xcarchive/Products/Library/Frameworks/NewRelic.framework"
      macOSDsym = "#{wd}/#{Constants::ARCHIVES}/macOS.xcarchive/dSYMs/NewRelic.framework.dSYM"

      create_xcframework(frameworks_with_dsyms: {
        iosArchive => { dsyms: iosDsym },
        iosSimArchive => {},
        tvOSArchive => { dsyms: tvOSDsym },
        tvOSSimArchive => {},
        watchOSArchive => { dsyms: watchOSDsym },
        watchOSSimArchive => {},
        macOSArchive => { dsyms: macOSDsym }
      }, output: "#{dirName}/NewRelic.xcframework")
    end

    codesignFramework

    # copying dsym tools into the xcframework is not going to work out for the mac catalyst build.
    #cpDsymToolsToFramework

  end

  desc "Copy dsym-upload-tools to xcframework"
  lane :cpDsymToolsToFramework do 
    Dir.chdir("..") do
      sh("mkdir -p NewRelic.xcframework/Resources/")
      sh("cp -r dsym-upload-tools/ NewRelic.xcframework/Resources/")
    end
  end
  desc "Codesign xcframework"
  lane :codesignFramework do 
    Dir.chdir("..") do
      sh("codesign --timestamp -v --sign \"Apple Distribution: New Relic Inc (SU7SUNGZJP)\" NewRelic.xcframework")
    end
  end
  # DEBUG LANES
  
  desc "Ouput Universal NewRelic.xcframework for iOS Only"
  lane :internalOutputXCFrameworkIOSOnly do 
    Dir.chdir("..") do
      wd = Dir.pwd
      iosArchive = "#{wd}/#{Constants::ARCHIVES}/iOS.xcarchive/Products/Library/Frameworks/NewRelic.framework"
      iosDsym = "#{wd}/#{Constants::ARCHIVES}/iOS.xcarchive/dSYMs/NewRelic.framework.dSYM"
      iosSimArchive = "#{wd}/#{Constants::DD}/Build/Products/#{Constants::MODE}-iphonesimulator/NewRelic.framework"

      create_xcframework(frameworks_with_dsyms: {
        iosArchive => { dsyms: iosDsym },
        iosSimArchive => {},
      }, output: "dylib-ios-agent/NewRelic.xcframework")
    end

    cpDsymToolsToFramework
  end

end
